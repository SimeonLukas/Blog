import {
  ExtendedColor,
  Renderer,
  Vector2,
  getFullRenderingSettings
} from "./chunk-C4ANF4DU.js";
import "./chunk-UXIASGQL.js";

// node_modules/@revideo/renderer/lib/client/render.js
var render = async (project, workerId, totalNumOfWorkers, hiddenFolderId, overwriteRenderSettings) => {
  try {
    const renderer = new Renderer(project);
    const range = overwriteRenderSettings.range ?? project.settings.shared.range;
    const { firstGlobalFrame, lastGlobalFrame } = await getGlobalFirstAndLastFrame(project, renderer, range[0], range[1]);
    const { firstWorkerFrame, lastWorkerFrame } = await getWorkerFirstAndLastFrame(firstGlobalFrame, lastGlobalFrame, workerId, totalNumOfWorkers);
    const renderSettingsFromProject = getFullRenderingSettings(project);
    let background = renderSettingsFromProject.background;
    if (overwriteRenderSettings.background) {
      background = new ExtendedColor(overwriteRenderSettings.background);
    }
    let size = renderSettingsFromProject.size;
    if (overwriteRenderSettings.size) {
      size = new Vector2(overwriteRenderSettings.size.x, overwriteRenderSettings.size.y);
    }
    const combinedSettings = {
      ...renderSettingsFromProject,
      name: project.name,
      hiddenFolderId,
      ...overwriteRenderSettings,
      background,
      size,
      range: [
        renderer.frameToTime(firstWorkerFrame),
        renderer.frameToTime(lastWorkerFrame)
      ]
    };
    await renderer.render(combinedSettings);
    window.onRenderComplete();
  } catch (e) {
    window.onRenderFailed(e.message);
  }
};
async function getGlobalFirstAndLastFrame(project, renderer, startSecondFromUser, endSecondFromUser) {
  const firstGlobalFrame = renderer.timeToFrame(startSecondFromUser);
  let lastGlobalFrame;
  if (isFinite(endSecondFromUser)) {
    lastGlobalFrame = renderer.timeToFrame(endSecondFromUser);
  } else {
    const settings = {
      ...getFullRenderingSettings(project),
      name: project.name
    };
    lastGlobalFrame = await renderer.getNumberOfFrames(settings);
  }
  return { firstGlobalFrame, lastGlobalFrame };
}
async function getWorkerFirstAndLastFrame(firstGlobalFrame, lastGlobalFrame, workerId, totalNumOfWorkers) {
  const videoDurationInFrames = lastGlobalFrame - firstGlobalFrame;
  const framesPerWorker = Math.ceil(videoDurationInFrames / totalNumOfWorkers);
  const offset = workerId === 0 ? 0 : 1;
  const firstWorkerFrame = firstGlobalFrame + framesPerWorker * workerId + offset;
  const lastWorkerFrame = Math.min(firstWorkerFrame + framesPerWorker - offset, lastGlobalFrame);
  return { firstWorkerFrame, lastWorkerFrame };
}
export {
  render
};
//# sourceMappingURL=@revideo_renderer_lib_client_render.js.map
