"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FFmpegExporterServer = exports.extensions = void 0;
const telemetry_1 = require("@revideo/telemetry");
const ffmpeg = require("fluent-ffmpeg");
const os = require("os");
const path = require("path");
const image_stream_1 = require("./image-stream");
const settings_1 = require("./settings");
const pixelFormats = {
    mp4: 'yuv420p',
    webm: 'yuva420p',
    proRes: 'yuva444p10le',
};
exports.extensions = {
    mp4: 'mp4',
    webm: 'webm',
    proRes: 'mov',
};
/**
 * The server-side implementation of the FFmpeg video exporter.
 */
class FFmpegExporterServer {
    constructor(settings) {
        if (settings.exporter.name !== '@revideo/core/ffmpeg') {
            throw new Error('Invalid exporter');
        }
        this.settings = settings;
        this.format = settings.exporter.options.format;
        this.jobFolder = path.join(os.tmpdir(), `revideo-${this.settings.name}-${settings.hiddenFolderId}`);
        this.stream = new image_stream_1.ImageStream();
        ffmpeg.setFfmpegPath(settings_1.ffmpegSettings.getFfmpegPath());
        this.command = ffmpeg();
        // Input image sequence
        this.command
            .input(this.stream)
            .inputFormat('image2pipe')
            .inputFps(settings.fps);
        // Output settings
        const size = {
            x: Math.round(settings.size.x * settings.resolutionScale),
            y: Math.round(settings.size.y * settings.resolutionScale),
        };
        this.command
            .output(path.join(this.jobFolder, `visuals.${exports.extensions[this.format]}`))
            .outputOptions([`-pix_fmt ${pixelFormats[this.format]}`, '-shortest'])
            .outputFps(settings.fps)
            .size(`${size.x}x${size.y}`);
        if (this.format === 'proRes') {
            this.command.outputOptions(['-c:v prores_ks', '-profile:v 4444']);
        }
        this.command.outputOptions(['-movflags +faststart']);
        this.promise = new Promise((resolve, reject) => {
            this.command.on('end', resolve).on('error', reject);
        });
    }
    async start() {
        this.command.run();
    }
    async handleFrame({ data }) {
        const base64Data = data.slice(data.indexOf(',') + 1);
        this.stream.pushImage(Buffer.from(base64Data, 'base64'));
    }
    async end(result) {
        this.stream.pushImage(null);
        if (result === 1) {
            try {
                this.command.kill('SIGKILL');
                await this.promise;
            }
            catch (err) {
                (0, telemetry_1.sendEvent)(telemetry_1.EventName.Error, { message: err.message });
            }
        }
        else {
            await this.promise;
        }
    }
    async kill() {
        try {
            this.command.kill('SIGKILL');
            await this.promise;
        }
        catch (_) {
            return;
        }
    }
}
exports.FFmpegExporterServer = FFmpegExporterServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZtcGVnLWV4cG9ydGVyLXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mZm1wZWctZXhwb3J0ZXItc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUtBLGtEQUF3RDtBQUN4RCx3Q0FBd0M7QUFDeEMseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixpREFBMkM7QUFDM0MseUNBQTBDO0FBUTFDLE1BQU0sWUFBWSxHQUFvRDtJQUNwRSxHQUFHLEVBQUUsU0FBUztJQUNkLElBQUksRUFBRSxVQUFVO0lBQ2hCLE1BQU0sRUFBRSxjQUFjO0NBQ3ZCLENBQUM7QUFFVyxRQUFBLFVBQVUsR0FBb0Q7SUFDekUsR0FBRyxFQUFFLEtBQUs7SUFDVixJQUFJLEVBQUUsTUFBTTtJQUNaLE1BQU0sRUFBRSxLQUFLO0NBQ2QsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBYSxvQkFBb0I7SUFRL0IsWUFBbUIsUUFBZ0M7UUFDakQsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxzQkFBc0IsRUFBRSxDQUFDO1lBQ3RELE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFL0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUN4QixFQUFFLENBQUMsTUFBTSxFQUFFLEVBQ1gsV0FBVyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsY0FBYyxFQUFFLENBQzNELENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksMEJBQVcsRUFBRSxDQUFDO1FBRWhDLE1BQU0sQ0FBQyxhQUFhLENBQUMseUJBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFD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