import type { Edit } from './utils';
export declare class Segment {
    private done;
    private currentFramePastSegmentEndTime;
    private abortController;
    private uri;
    private file;
    private edit;
    private responseFinished;
    private decoder;
    private framesProcessed;
    private startTime;
    private framesDue;
    private frameBuffer;
    private encodedChunkQueue;
    private readMore;
    constructor(uri: string, file: any, edits: Edit[], currentSegment: number, startTime?: number);
    start(decoderConfig: VideoDecoderConfig): Promise<void>;
    /**
     * Starts streaming the video at the given URI from the given offset.
     * @param file - MP4Box file. Needs to be created and configured before calling this function.
     * @param uri - URI of the video file.
     * @param offset - Offset to start streaming from.
     * @returns - A function to read more data from the response.
     */
    private startStreamingAtOffset;
    /**
     * Called when samples are available on the MP4 file.
     * Sends chunks to the decoder.
     */
    private onSamples;
    private decodeChunks;
    private flushDecoderWithRetry;
    /**
     * Called when the decoder has a frame ready.
     * Pushes the frame to the buffer so it can be consumed.
     */
    private onFrame;
    private populateBuffer;
    getNextFrame(): Promise<VideoFrame | undefined>;
    /**
     * Called when we are done with the extractor.
     */
    close(): Promise<void>;
    getFramesProcessed(): number;
    getStartTime(): number;
}
//# sourceMappingURL=segment.d.ts.map