import { Mp4Parser } from './parser';
// List of VideoFrameExtractors
const videoFrameExtractors = new Map();
export async function dropExtractor(id, filePath) {
    const extractorId = filePath + '-' + id;
    const extractor = videoFrameExtractors.get(extractorId);
    if (extractor) {
        extractor.close();
        videoFrameExtractors.delete(extractorId);
    }
}
export async function getFrame(id, filePath, time, fps) {
    // Check if we already have a VideoFrameExtractor for this video
    const extractorId = filePath + '-' + id;
    let extractor = videoFrameExtractors.get(extractorId);
    const frameDuration = 1 / fps;
    /**
     * Sometimes, HTMLVideoElement.duration is not accurate, which can lead to the
     * requested time being greater than the duration.
     * To prevent this, we clamp the time to the duration reported by the extractor.
     */
    const duration = extractor?.getDuration();
    if (duration && time > duration) {
        time = duration;
    }
    const isOldFrame = extractor && Math.abs(time - extractor.getLastTime()) < frameDuration / 2;
    // If time has not changed, return the last frame
    if (extractor && isOldFrame) {
        const lastFrame = extractor.getLastFrame();
        if (!lastFrame) {
            throw new Error('No last frame');
        }
        return lastFrame;
    }
    // If the video has skipped back we need to create a new extractor
    if (extractor && time + frameDuration < extractor.getTime()) {
        extractor.close();
        videoFrameExtractors.delete(extractorId);
        extractor = undefined;
    }
    // If the video has skipped forward we need to create a new extractor
    if (extractor && time > extractor.getTime() + frameDuration * 1.5) {
        extractor.close();
        videoFrameExtractors.delete(extractorId);
        extractor = undefined;
    }
    if (!extractor) {
        extractor = new Mp4Parser(filePath, fps, time);
        await extractor.start();
        videoFrameExtractors.set(extractorId, extractor);
    }
    // Go to the frame that is closest to the requested time
    return extractor.getNextFrame();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXA0LXBhcnNlci1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi91dGlscy92aWRlby9tcDQtcGFyc2VyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVuQywrQkFBK0I7QUFDL0IsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBcUIsQ0FBQztBQUUxRCxNQUFNLENBQUMsS0FBSyxVQUFVLGFBQWEsQ0FBQyxFQUFVLEVBQUUsUUFBZ0I7SUFDOUQsTUFBTSxXQUFXLEdBQUcsUUFBUSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDeEMsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hELElBQUksU0FBUyxFQUFFLENBQUM7UUFDZCxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEIsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQzVCLEVBQVUsRUFDVixRQUFnQixFQUNoQixJQUFZLEVBQ1osR0FBVztJQUVYLGdFQUFnRTtJQUNoRSxNQUFNLFdBQVcsR0FBRyxRQUFRLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUN4QyxJQUFJLFNBQVMsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFdEQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUU5Qjs7OztPQUlHO0lBQ0gsTUFBTSxRQUFRLEdBQUcsU0FBUyxFQUFFLFdBQVcsRUFBRSxDQUFDO0lBQzFDLElBQUksUUFBUSxJQUFJLElBQUksR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUNoQyxJQUFJLEdBQUcsUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FDZCxTQUFTLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUU1RSxpREFBaUQ7SUFDakQsSUFBSSxTQUFTLElBQUksVUFBVSxFQUFFLENBQUM7UUFDNUIsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkMsQ0FBQztRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxrRUFBa0U7SUFDbEUsSUFBSSxTQUFTLElBQUksSUFBSSxHQUFHLGFBQWEsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUM1RCxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEIsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELHFFQUFxRTtJQUNyRSxJQUFJLFNBQVMsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNsRSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEIsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNmLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9DLE1BQU0sU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hCLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELHdEQUF3RDtJQUN4RCxPQUFPLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsQyxDQUFDIn0=