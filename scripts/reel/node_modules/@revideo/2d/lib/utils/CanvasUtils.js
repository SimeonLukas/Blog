import { Color, Vector2 } from '@revideo/core';
import { Gradient, Pattern } from '../partials';
export function canvasStyleParser(style) {
    if (style === null) {
        return null;
    }
    if (style instanceof Gradient) {
        return style;
    }
    if (style instanceof Pattern) {
        return style;
    }
    return new Color(style);
}
export function resolveCanvasStyle(style, context) {
    if (style === null) {
        return '';
    }
    if (style instanceof Color) {
        return style.serialize();
    }
    if (style instanceof Gradient) {
        return style.canvasGradient(context);
    }
    if (style instanceof Pattern) {
        return style.canvasPattern(context) ?? '';
    }
    return '';
}
export function drawRoundRect(context, rect, radius, smoothCorners, cornerSharpness) {
    if (radius.top === 0 &&
        radius.right === 0 &&
        radius.bottom === 0 &&
        radius.left === 0) {
        drawRect(context, rect);
        return;
    }
    const topLeft = adjustRectRadius(radius.top, radius.right, radius.left, rect);
    const topRight = adjustRectRadius(radius.right, radius.top, radius.bottom, rect);
    const bottomRight = adjustRectRadius(radius.bottom, radius.left, radius.right, rect);
    const bottomLeft = adjustRectRadius(radius.left, radius.bottom, radius.top, rect);
    if (smoothCorners) {
        const sharpness = (radius) => {
            const val = radius * cornerSharpness;
            return radius - val;
        };
        context.moveTo(rect.left + topLeft, rect.top);
        context.lineTo(rect.right - topRight, rect.top);
        context.bezierCurveTo(rect.right - sharpness(topRight), rect.top, rect.right, rect.top + sharpness(topRight), rect.right, rect.top + topRight);
        context.lineTo(rect.right, rect.bottom - bottomRight);
        context.bezierCurveTo(rect.right, rect.bottom - sharpness(bottomRight), rect.right - sharpness(bottomRight), rect.bottom, rect.right - bottomRight, rect.bottom);
        context.lineTo(rect.left + bottomLeft, rect.bottom);
        context.bezierCurveTo(rect.left + sharpness(bottomLeft), rect.bottom, rect.left, rect.bottom - sharpness(bottomLeft), rect.left, rect.bottom - bottomLeft);
        context.lineTo(rect.left, rect.top + topLeft);
        context.bezierCurveTo(rect.left, rect.top + sharpness(topLeft), rect.left + sharpness(topLeft), rect.top, rect.left + topLeft, rect.top);
        return;
    }
    context.moveTo(rect.left + topLeft, rect.top);
    context.arcTo(rect.right, rect.top, rect.right, rect.bottom, topRight);
    context.arcTo(rect.right, rect.bottom, rect.left, rect.bottom, bottomRight);
    context.arcTo(rect.left, rect.bottom, rect.left, rect.top, bottomLeft);
    context.arcTo(rect.left, rect.top, rect.right, rect.top, topLeft);
}
export function adjustRectRadius(radius, horizontal, vertical, rect) {
    const width = radius + horizontal > rect.width
        ? rect.width * (radius / (radius + horizontal))
        : radius;
    const height = radius + vertical > rect.height
        ? rect.height * (radius / (radius + vertical))
        : radius;
    return Math.min(width, height);
}
export function drawRect(context, rect) {
    context.rect(rect.x, rect.y, rect.width, rect.height);
}
export function fillRect(context, rect) {
    context.fillRect(rect.x, rect.y, rect.width, rect.height);
}
export function strokeRect(context, rect) {
    context.strokeRect(rect.x, rect.y, rect.width, rect.height);
}
export function drawPolygon(path, rect, sides) {
    const size = rect.size.scale(0.5);
    for (let i = 0; i <= sides; i++) {
        const theta = (i * 2 * Math.PI) / sides;
        const direction = Vector2.fromRadians(theta).perpendicular;
        const vertex = direction.mul(size);
        if (i === 0) {
            moveTo(path, vertex);
        }
        else {
            lineTo(path, vertex);
        }
    }
    path.closePath();
}
export function drawImage(context, image, first, second) {
    if (second) {
        context.drawImage(image, first.x, first.y, first.width, first.height, second.x, second.y, second.width, second.height);
    }
    else {
        context.drawImage(image, first.x, first.y, first.width, first.height);
    }
}
export function moveTo(context, position) {
    context.moveTo(position.x, position.y);
}
export function lineTo(context, position) {
    context.lineTo(position.x, position.y);
}
export function arcTo(context, through, position, radius) {
    context.arcTo(through.x, through.y, position.x, position.y, radius);
}
export function drawLine(context, points) {
    if (points.length < 2)
        return;
    moveTo(context, points[0]);
    for (const point of points.slice(1)) {
        lineTo(context, point);
    }
}
export function drawPivot(context, offset, radius = 8) {
    lineTo(context, offset.addY(-radius));
    lineTo(context, offset.addY(radius));
    lineTo(context, offset);
    lineTo(context, offset.addX(-radius));
    arc(context, offset, radius);
}
export function arc(context, center, radius, startAngle = 0, endAngle = Math.PI * 2, counterclockwise = false) {
    context.arc(center.x, center.y, radius, startAngle, endAngle, counterclockwise);
}
export function bezierCurveTo(context, controlPoint1, controlPoint2, to) {
    context.bezierCurveTo(controlPoint1.x, controlPoint1.y, controlPoint2.x, controlPoint2.y, to.x, to.y);
}
export function quadraticCurveTo(context, controlPoint, to) {
    context.quadraticCurveTo(controlPoint.x, controlPoint.y, to.x, to.y);
}
//# sourceMappingURL=data:application/json;base64,