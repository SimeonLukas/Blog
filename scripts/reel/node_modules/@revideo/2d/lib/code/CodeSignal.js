import { createSignal, deepLerp, DependencyContext, SignalContext, unwrap, } from '@revideo/core';
import { addInitializer, getPropertyMetaOrCreate } from '../decorators';
import { defaultDiffer } from './CodeDiffer';
import { insert, replace } from './CodeFragment';
import { CODE, parseCodeScope, resolveCodeTag } from './CodeScope';
import { defaultTokenize } from './CodeTokenizer';
import { extractRange } from './extractRange';
export class CodeSignalContext extends SignalContext {
    constructor(initial, owner, highlighter) {
        super(initial, deepLerp, owner);
        this.highlighter = highlighter;
        this.progress = createSignal(0);
        Object.defineProperty(this.invokable, 'edit', {
            value: this.edit.bind(this),
        });
        Object.defineProperty(this.invokable, 'append', {
            value: this.append.bind(this),
        });
        Object.defineProperty(this.invokable, 'prepend', {
            value: this.prepend.bind(this),
        });
        Object.defineProperty(this.invokable, 'insert', {
            value: this.insert.bind(this),
        });
        Object.defineProperty(this.invokable, 'remove', {
            value: this.remove.bind(this),
        });
        Object.defineProperty(this.invokable, 'replace', {
            value: this.replace.bind(this),
        });
    }
    *tweener(value, duration, timingFunction) {
        let tokenize = defaultTokenize;
        const highlighter = unwrap(this.highlighter);
        if (highlighter) {
            yield (async () => {
                do {
                    await DependencyContext.consumePromises();
                    highlighter.initialize();
                } while (DependencyContext.hasPromises());
            })();
            tokenize = (input) => highlighter.tokenize(input);
        }
        this.progress(0);
        this.set({
            progress: this.progress,
            fragments: defaultDiffer(this.get(), this.parse(unwrap(value)), tokenize),
        });
        yield* this.progress(1, duration, timingFunction);
        this.set(value);
    }
    edit(duration = 0.6) {
        return (strings, ...tags) => this.editTween(CODE(strings, ...tags), duration);
    }
    append(first = 0.6, duration) {
        if (typeof first === 'string') {
            if (duration === undefined) {
                const current = this.get();
                return this.set({
                    progress: 0,
                    fragments: [...current.fragments, first],
                });
            }
            else {
                return this.appendTween(first, duration);
            }
        }
        const savedDuration = first;
        return (strings, ...tags) => this.append(resolveCodeTag(CODE(strings, ...tags), true), savedDuration);
    }
    prepend(first = 0.6, duration) {
        if (typeof first === 'string') {
            if (duration === undefined) {
                const current = this.get();
                return this.set({
                    progress: 0,
                    fragments: [first, ...current.fragments],
                });
            }
            else {
                return this.prependTween(first, duration);
            }
        }
        const savedDuration = first;
        return (strings, ...tags) => this.prepend(resolveCodeTag(CODE(strings, ...tags), true), savedDuration);
    }
    insert(point, code, duration) {
        return this.replace([point, point], code, duration);
    }
    remove(range, duration) {
        return this.replace(range, '', duration);
    }
    replace(range, code, duration) {
        if (duration === undefined) {
            const current = this.get();
            const [fragments, index] = extractRange(range, current.fragments);
            fragments[index] = code;
            return this.set({
                progress: current.progress,
                fragments,
            });
        }
        else {
            return this.replaceTween(range, code, duration);
        }
    }
    *replaceTween(range, code, duration) {
        let current = this.get();
        const [fragments, index] = extractRange(range, current.fragments);
        const progress = createSignal(0);
        const scope = {
            progress,
            fragments: [replace(fragments[index], code)],
        };
        fragments[index] = scope;
        this.set({
            progress: current.progress,
            fragments,
        });
        yield* progress(1, duration);
        current = this.get();
        this.set({
            progress: current.progress,
            fragments: current.fragments.map(fragment => fragment === scope ? code : fragment),
        });
        progress.context.dispose();
    }
    *editTween(value, duration) {
        this.progress(0);
        this.set({
            progress: this.progress,
            fragments: value,
        });
        yield* this.progress(1, duration);
        const current = this.get();
        this.set({
            progress: 0,
            fragments: current.fragments.map(fragment => value.includes(fragment) ? resolveCodeTag(fragment, true) : fragment),
        });
    }
    *appendTween(value, duration) {
        let current = this.get();
        const progress = createSignal(0);
        const scope = {
            progress,
            fragments: [insert(value)],
        };
        this.set({
            progress: current.progress,
            fragments: [...current.fragments, scope],
        });
        yield* progress(1, duration);
        current = this.get();
        this.set({
            progress: current.progress,
            fragments: current.fragments.map(fragment => fragment === scope ? value : fragment),
        });
        progress.context.dispose();
    }
    *prependTween(value, duration) {
        let current = this.get();
        const progress = createSignal(0);
        const scope = {
            progress,
            fragments: [insert(value)],
        };
        this.set({
            progress: current.progress,
            fragments: [scope, ...current.fragments],
        });
        yield* progress(1, duration);
        current = this.get();
        this.set({
            progress: current.progress,
            fragments: current.fragments.map(fragment => fragment === scope ? value : fragment),
        });
        progress.context.dispose();
    }
    parse(value) {
        return parseCodeScope(value);
    }
    toSignal() {
        return this.invokable;
    }
}
export function codeSignal() {
    return (target, key) => {
        const meta = getPropertyMetaOrCreate(target, key);
        addInitializer(target, (instance) => {
            instance[key] = new CodeSignalContext(meta.default ?? [], instance).toSignal();
        });
    };
}
//# sourceMappingURL=data:application/json;base64,