import { GeneratorScene, SceneRenderEvent, Vector2, transformVectorAsPoint, useLogger, } from '@revideo/core';
import { Audio, Media, Video, View2D } from '../components';
export class Scene2D extends GeneratorScene {
    constructor(description) {
        super(description);
        this.view = null;
        this.registeredNodes = new Map();
        this.nodeCounters = new Map();
        this.assetHash = Date.now().toString();
        this.recreateView();
        if (import.meta.hot) {
            import.meta.hot.on('revideo:assets', () => {
                this.assetHash = Date.now().toString();
                this.getView().assetHash(this.assetHash);
            });
        }
    }
    getView() {
        return this.view;
    }
    next() {
        this.getView()
            ?.playbackState(this.playback.state)
            .globalTime(this.playback.time);
        return super.next();
    }
    async draw(context) {
        context.save();
        this.renderLifecycle.dispatch([SceneRenderEvent.BeforeRender, context]);
        context.save();
        this.renderLifecycle.dispatch([SceneRenderEvent.BeginRender, context]);
        this.getView()
            .playbackState(this.playback.state)
            .globalTime(this.playback.time)
            .fps(this.playback.fps);
        await this.getView().render(context);
        this.renderLifecycle.dispatch([SceneRenderEvent.FinishRender, context]);
        context.restore();
        this.renderLifecycle.dispatch([SceneRenderEvent.AfterRender, context]);
        context.restore();
    }
    reset(previousScene) {
        for (const key of this.registeredNodes.keys()) {
            try {
                this.registeredNodes.get(key).dispose();
            }
            catch (e) {
                this.logger.error(e);
            }
        }
        this.registeredNodes.clear();
        this.registeredNodes = new Map();
        this.nodeCounters.clear();
        this.recreateView();
        return super.reset(previousScene);
    }
    inspectPosition(x, y) {
        const node = this.getNodeByPosition(x, y);
        return node?.key;
    }
    getNodeByPosition(x, y) {
        return this.execute(() => this.getView().hit(new Vector2(x, y)) ?? null);
    }
    validateInspection(element) {
        return this.getNode(element)?.key ?? null;
    }
    inspectAttributes(element) {
        const node = this.getNode(element);
        if (!node)
            return null;
        const attributes = {
            stack: node.creationStack,
            key: node.key,
        };
        for (const { key, meta, signal } of node) {
            if (!meta.inspectable)
                continue;
            attributes[key] = signal();
        }
        return attributes;
    }
    drawOverlay(element, matrix, context) {
        const node = this.getNode(element);
        if (node) {
            this.execute(() => {
                node.drawOverlay(context, matrix.multiply(node.localToWorld()));
            });
        }
    }
    transformMousePosition(x, y) {
        return transformVectorAsPoint(new Vector2(x, y), this.getView().localToParent().inverse());
    }
    registerNode(node, key) {
        const className = node.constructor?.name ?? 'unknown';
        const counter = (this.nodeCounters.get(className) ?? 0) + 1;
        this.nodeCounters.set(className, counter);
        if (key && this.registeredNodes.has(key)) {
            useLogger().error({
                message: `Duplicated node key: "${key}".`,
                inspect: key,
                stack: new Error().stack,
            });
            key = undefined;
        }
        key ?? (key = `${this.name}/${className}[${counter}]`);
        this.registeredNodes.set(key, node);
        const currentNodeMap = this.registeredNodes;
        return [key, () => currentNodeMap.delete(key)];
    }
    getNode(key) {
        if (typeof key !== 'string')
            return null;
        return this.registeredNodes.get(key) ?? null;
    }
    *getDetachedNodes() {
        for (const node of this.registeredNodes.values()) {
            if (!node.parent() && node !== this.view)
                yield node;
        }
    }
    getMediaAssets() {
        const playingVideos = Array.from(this.registeredNodes.values())
            .filter((node) => node instanceof Video)
            .filter(video => video.isPlaying());
        const playingAudios = Array.from(this.registeredNodes.values())
            .filter((node) => node instanceof Audio)
            .filter(audio => audio.isPlaying());
        const returnObjects = [];
        returnObjects.push(...playingVideos.map(vid => ({
            key: vid.key,
            type: 'video',
            src: vid.src(),
            decoder: vid.decoder(),
            playbackRate: typeof vid.playbackRate === 'function'
                ? vid.playbackRate()
                : vid.playbackRate,
            volume: vid.getVolume(),
            currentTime: vid.getCurrentTime(),
            duration: vid.getDuration(),
        })));
        returnObjects.push(...playingAudios.map(audio => ({
            key: audio.key,
            type: 'audio',
            src: audio.src(),
            playbackRate: typeof audio.playbackRate === 'function'
                ? audio.playbackRate()
                : audio.playbackRate,
            volume: audio.getVolume(),
            currentTime: audio.getCurrentTime(),
            duration: audio.getDuration(),
        })));
        return returnObjects;
    }
    stopAllMedia() {
        const playingMedia = Array.from(this.registeredNodes.values())
            .filter((node) => node instanceof Media)
            .filter(video => video.isPlaying());
        for (const media of playingMedia) {
            media.dispose();
        }
    }
    adjustVolume(volumeScale) {
        const mediaNodes = Array.from(this.registeredNodes.values()).filter((node) => node instanceof Media);
        for (const media of mediaNodes) {
            media.setVolume(media.getVolume() * volumeScale);
        }
    }
    recreateView() {
        this.execute(() => {
            const size = this.getSize();
            this.view = new View2D({
                position: size.scale(this.resolutionScale / 2),
                scale: this.resolutionScale,
                assetHash: this.assetHash,
                size,
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,