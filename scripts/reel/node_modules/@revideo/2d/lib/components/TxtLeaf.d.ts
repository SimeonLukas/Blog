import type { SignalValue, SimpleSignal } from '@revideo/core';
import { BBox } from '@revideo/core';
import type { ShapeProps } from './Shape';
import { Shape } from './Shape';
export interface TxtLeafProps extends ShapeProps {
    children?: string;
    text?: SignalValue<string>;
}
export declare const TXT_TYPE: unique symbol;
export declare class TxtLeaf extends Shape {
    protected static readonly segmenter: any;
    readonly text: SimpleSignal<string, this>;
    constructor({ children, ...rest }: TxtLeafProps);
    protected parentTxt(): (import("./Node").Node & Record<typeof TXT_TYPE, unknown>) | null;
    protected draw(context: CanvasRenderingContext2D): Promise<void>;
    protected drawText(context: CanvasRenderingContext2D, text: string, box: BBox): Promise<void>;
    protected getCacheBBox(): BBox;
    protected applyFlex(): void;
    protected updateLayout(): void;
}
//# sourceMappingURL=TxtLeaf.d.ts.map