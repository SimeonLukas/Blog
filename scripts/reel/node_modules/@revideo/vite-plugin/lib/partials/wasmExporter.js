"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wasmExporterPlugin = wasmExporterPlugin;
const formidable_1 = require("formidable");
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path_1 = __importDefault(require("path"));
const stream_1 = require("stream");
function wasmExporterPlugin() {
    return {
        name: 'revideo:mp4-wasm',
        configureServer(server) {
            // Virtual file for mp4-wasm
            server.middlewares.use(async (req, res, next) => {
                if (req.url && req.url === '/@mp4-wasm') {
                    const pathNew = path_1.default.dirname(require.resolve('mp4-wasm'));
                    const filePath = path_1.default.resolve(pathNew, 'mp4.wasm');
                    const file = await fs.promises.readFile(filePath);
                    res.setHeader('Content-Type', 'application/wasm');
                    stream_1.Readable.from(file).pipe(res);
                    return;
                }
                next();
            });
            // Endpoint to download the video file from the client
            server.middlewares.use('/uploadVideoFile', async (req, res) => {
                if (req.method === 'POST') {
                    const form = new formidable_1.IncomingForm({ maxFileSize: 1024 * 1024 * 1024 * 10 }); // 10GB limit
                    form.parse(req, async (err, fields, files) => {
                        if (err) {
                            console.error('Error parsing form:', err);
                            res.statusCode = 500;
                            res.end();
                            return;
                        }
                        try {
                            const tempDir = fields.tempDir[0];
                            const file = files.file[0];
                            const outputPath = path_1.default.join(os.tmpdir(), tempDir, 'visuals.mp4');
                            const writeStream = fs.createWriteStream(outputPath);
                            await new Promise((resolve, reject) => {
                                fs.createReadStream(file.filepath)
                                    .pipe(writeStream)
                                    .on('finish', resolve)
                                    .on('error', reject);
                            });
                            res.statusCode = 200;
                            res.end();
                        }
                        catch (err) {
                            console.error('Error uploading video:', err);
                            res.statusCode = 500;
                            res.end();
                        }
                    });
                }
            });
        },
    };
}
//# sourceMappingURL=wasmExporter.js.map