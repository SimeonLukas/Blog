"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rivePlugin = rivePlugin;
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const stream_1 = require("stream");
async function getRiveWasmPath() {
    try {
        const packageJsonPath = require.resolve('@rive-app/canvas-advanced/package.json');
        const packageDir = path_1.default.dirname(packageJsonPath);
        const wasmPath = path_1.default.join(packageDir, 'rive.wasm');
        await fs.promises.access(wasmPath, fs.constants.F_OK);
        return wasmPath;
    }
    catch (error) {
        console.error('Error finding Rive WASM file:', error);
        throw new Error('Could not find Rive WASM file');
    }
}
function rivePlugin() {
    return {
        name: 'revideo:rive-wasm',
        configureServer(server) {
            server.middlewares.use(async (req, res, next) => {
                if (req.url && req.url === '/@rive-wasm') {
                    try {
                        const wasmPath = await getRiveWasmPath();
                        const file = await fs.promises.readFile(wasmPath);
                        res.setHeader('Content-Type', 'application/wasm');
                        stream_1.Readable.from(file).pipe(res);
                    }
                    catch (error) {
                        console.error('Error serving Rive WASM file:', error);
                        res.statusCode = 500;
                        res.end('Error serving Rive WASM file');
                    }
                    return;
                }
                next();
            });
        },
    };
}
//# sourceMappingURL=rive.js.map