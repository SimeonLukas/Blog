import { Color as ChromaColor, mix } from 'chroma-js';
import { SignalContext } from '../signals';
// iife prevents tree shaking from stripping our methods.
const ExtendedColor = (() => {
    ChromaColor.symbol = ChromaColor.prototype.symbol = Symbol.for('@revideo/core/types/Color');
    ChromaColor.lerp = ChromaColor.prototype.lerp = (from, to, value, colorSpace = 'lch') => {
        if (typeof from === 'string') {
            from = new ChromaColor(from);
        }
        if (typeof to === 'string') {
            to = new ChromaColor(to);
        }
        const fromIsColor = from instanceof ChromaColor;
        const toIsColor = to instanceof ChromaColor;
        if (!fromIsColor) {
            from = toIsColor
                ? to.alpha(0)
                : new ChromaColor('rgba(0, 0, 0, 0)');
        }
        if (!toIsColor) {
            to = fromIsColor
                ? from.alpha(0)
                : new ChromaColor('rgba(0, 0, 0, 0)');
        }
        return mix(from, to, value, colorSpace);
    };
    ChromaColor.createLerp = ChromaColor.prototype.createLerp =
        (colorSpace) => (from, to, value) => ChromaColor.lerp(from, to, value, colorSpace);
    ChromaColor.createSignal = (initial, interpolation = ChromaColor.lerp) => {
        return new SignalContext(initial, interpolation, undefined, value => new ChromaColor(value)).toSignal();
    };
    ChromaColor.prototype.toSymbol = () => {
        return ChromaColor.symbol;
    };
    ChromaColor.prototype.toUniform = function (gl, location) {
        gl.uniform4fv(location, this.gl());
    };
    ChromaColor.prototype.serialize = function () {
        return this.css();
    };
    ChromaColor.prototype.lerp = function (to, value, colorSpace) {
        return ChromaColor.lerp(this, to, value, colorSpace);
    };
    return ChromaColor;
})();
export { ExtendedColor as Color };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvQ29sb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLEtBQUssSUFBSSxXQUFXLEVBQUUsR0FBRyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXBELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFnRXpDLHlEQUF5RDtBQUN6RCxNQUFNLGFBQWEsR0FBdUIsQ0FBQyxHQUFHLEVBQUU7SUFDOUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUM1RCwyQkFBMkIsQ0FDNUIsQ0FBQztJQUVGLFdBQVcsQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FDOUMsSUFBaUMsRUFDakMsRUFBK0IsRUFDL0IsS0FBYSxFQUNiLGFBQWdDLEtBQUssRUFDckMsRUFBRTtRQUNGLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDN0IsSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUM7UUFDRCxJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzNCLEVBQUUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQixDQUFDO1FBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxZQUFZLFdBQVcsQ0FBQztRQUNoRCxNQUFNLFNBQVMsR0FBRyxFQUFFLFlBQVksV0FBVyxDQUFDO1FBRTVDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixJQUFJLEdBQUcsU0FBUztnQkFDZCxDQUFDLENBQUUsRUFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixDQUFDLENBQUMsSUFBSSxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2YsRUFBRSxHQUFHLFdBQVc7Z0JBQ2QsQ0FBQyxDQUFFLElBQW9CLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDaEMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELE9BQU8sR0FBRyxDQUFDLElBQW1CLEVBQUUsRUFBaUIsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDeEUsQ0FBQyxDQUFDO0lBRUYsV0FBVyxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVU7UUFDdkQsQ0FBQyxVQUE2QixFQUFFLEVBQUUsQ0FDbEMsQ0FDRSxJQUFpQyxFQUNqQyxFQUErQixFQUMvQixLQUFhLEVBQ2IsRUFBRSxDQUNGLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFbEQsV0FBVyxDQUFDLFlBQVksR0FBRyxDQUN6QixPQUFvQyxFQUNwQyxnQkFBb0QsV0FBVyxDQUFDLElBQUksRUFDakQsRUFBRTtRQUNyQixPQUFPLElBQUksYUFBYSxDQUN0QixPQUFPLEVBQ1AsYUFBYSxFQUNiLFNBQVMsRUFDVCxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUNoQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsV0FBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFO1FBQ3BDLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUM1QixDQUFDLENBQUM7SUFFRixXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUVoQyxFQUEwQixFQUMxQixRQUE4QjtRQUU5QixFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUM7SUFFRixXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRztRQUdoQyxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUM7SUFFRixXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUUzQixFQUFlLEVBQ2YsS0FBYSxFQUNiLFVBQXVCO1FBRXZCLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUM7SUFFRixPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDO0FBRUwsT0FBTyxFQUFDLGFBQWEsSUFBSSxLQUFLLEVBQUMsQ0FBQyJ9