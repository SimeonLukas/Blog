/**
 * These are the functions that can be used to apply transformations to a vector.
 *
 * These can't be methods of the vector class because they depend on Matrix2D which
 * would create a circular dependency.
 */
import { Matrix2D } from './Matrix2D';
import { Vector2 } from './Vector';
export function transformVectorAsPoint(vector, matrix) {
    const m = new Matrix2D(matrix);
    return new Vector2(vector.x * m.scaleX + vector.y * m.skewY + m.translateX, vector.x * m.skewX + vector.y * m.scaleY + m.translateY);
}
export function transformVector(vector, matrix) {
    const m = new Matrix2D(matrix);
    return new Vector2(vector.x * m.scaleX + vector.y * m.skewY, vector.x * m.skewX + vector.y * m.scaleY);
}
/**
 * Rotates the vector around a point by the provided angle.
 *
 * @param vector - The vector to rotate.
 * @param angle - The angle by which to rotate in degrees.
 * @param center - The center of rotation. Defaults to the origin.
 */
export function rotateVector(vector, angle, center = Vector2.zero) {
    const originVector = new Vector2(center);
    const matrix = Matrix2D.fromTranslation(originVector)
        .rotate(angle)
        .translate(originVector.flipped);
    return transformVectorAsPoint(vector, matrix);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yLXRyYW5zZm9ybWF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy92ZWN0b3ItdHJhbnNmb3JtYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBR0gsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUVwQyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRWpDLE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsTUFBZSxFQUNmLE1BQXdCO0lBRXhCLE1BQU0sQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9CLE9BQU8sSUFBSSxPQUFPLENBQ2hCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFDdkQsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsVUFBVSxDQUN4RCxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBZSxFQUFFLE1BQXdCO0lBQ3ZFLE1BQU0sQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRS9CLE9BQU8sSUFBSSxPQUFPLENBQ2hCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQ3hDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQ3pDLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FDMUIsTUFBZSxFQUNmLEtBQWEsRUFDYixTQUEwQixPQUFPLENBQUMsSUFBSTtJQUV0QyxNQUFNLFlBQVksR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV6QyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQztTQUNsRCxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2IsU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVuQyxPQUFPLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRCxDQUFDIn0=