import { AsyncEventDispatcher, EventDispatcher, ValueDispatcher, } from '../events';
import { clamp } from '../tweening';
import { Vector2 } from '../types';
import { Semaphore } from '../utils';
import { PlaybackManager, PlaybackState } from './PlaybackManager';
import { PlaybackStatus } from './PlaybackStatus';
import { SharedWebGLContext } from './SharedWebGLContext';
/**
 * The player logic used by the editor and embeddable player.
 *
 * @remarks
 * This class builds on top of the `PlaybackManager` to provide a simple
 * interface similar to other media players. It plays through the animation
 * using a real-time update loop.
 */
export class Player {
    /**
     * Triggered during each iteration of the update loop when the frame is ready
     * to be rendered.
     *
     * @remarks
     * Player does not perform any rendering on its own. For the animation to be
     * visible, another class must subscribe to this event and perform the
     * rendering itself. {@link Stage} can be used to display the animation.
     *
     * @eventProperty
     */
    get onRender() {
        return this.render.subscribable;
    }
    get onStateChanged() {
        return this.playerState.subscribable;
    }
    get onFrameChanged() {
        return this.frame.subscribable;
    }
    get onDurationChanged() {
        return this.duration.subscribable;
    }
    /**
     * Triggered right after recalculation finishes.
     *
     * @remarks
     * Can be used to provide visual feedback.
     *
     * @eventProperty
     */
    get onRecalculated() {
        return this.recalculated.subscribable;
    }
    get startFrame() {
        return Math.min(this.playback.duration, this.status.secondsToFrames(this.startTime));
    }
    get endFrame() {
        return Math.min(this.playback.duration, this.status.secondsToFrames(this.endTime));
    }
    get finished() {
        return this.playback.finished || this.playback.frame >= this.endFrame;
    }
    constructor(project, settings = {}, initialState = {}, initialFrame = -1) {
        this.project = project;
        this.settings = settings;
        this.initialState = initialState;
        this.initialFrame = initialFrame;
        this.render = new AsyncEventDispatcher();
        this.frame = new ValueDispatcher(0);
        this.duration = new ValueDispatcher(0);
        this.recalculated = new EventDispatcher();
        this.lock = new Semaphore();
        this.startTime = 0;
        this.endTime = Infinity;
        this.requestId = null;
        this.renderTime = 0;
        this.requestedSeek = -1;
        this.requestedRender = false;
        this.requestedRecalculation = true;
        this.active = false;
        this.playerState = new ValueDispatcher({
            loop: true,
            muted: true,
            volume: 1,
            speed: 1,
            ...initialState,
            paused: true,
        });
        this.sharedWebGLContext = new SharedWebGLContext(this.project.logger);
        this.requestedSeek = initialFrame;
        this.logger = this.project.logger;
        this.playback = new PlaybackManager();
        this.status = new PlaybackStatus(this.playback);
        this.size = settings.size ?? new Vector2(1920, 1080);
        this.resolutionScale = settings.resolutionScale ?? 1;
        this.startTime = settings.range?.[0] ?? 0;
        this.endTime = settings.range?.[1] ?? Infinity;
        this.playback.fps = settings.fps ?? 60;
        const scenes = [];
        for (const description of project.scenes) {
            const scene = new description.klass({
                ...description,
                playback: this.status,
                logger: this.project.logger,
                size: this.size,
                resolutionScale: this.resolutionScale,
                sharedWebGLContext: this.sharedWebGLContext,
                experimentalFeatures: project.experimentalFeatures,
            });
            scene.onReloaded.subscribe(() => this.requestRecalculation());
            scene.variables.updateSignals(project.variables ?? {});
            scenes.push(scene);
        }
        this.playback.setup(scenes);
        this.activate();
    }
    async configure(settings) {
        await this.lock.acquire();
        let frame = this.playback.frame;
        let recalculate = false;
        this.startTime = settings.range[0];
        this.endTime = settings.range[1];
        const newFps = Math.max(1, settings.fps);
        if (this.playback.fps !== newFps) {
            const ratio = newFps / this.playback.fps;
            this.playback.fps = newFps;
            frame = Math.floor(frame * ratio);
            recalculate = true;
        }
        if (!settings.size.exactlyEquals(this.size) ||
            settings.resolutionScale !== this.resolutionScale) {
            this.size = settings.size;
            this.resolutionScale = settings.resolutionScale;
            this.playback.reload({
                size: this.size,
                resolutionScale: this.resolutionScale,
            });
        }
        this.lock.release();
        if (recalculate) {
            this.playback.reload();
            this.frame.current = frame;
            this.requestRecalculation();
            this.requestedSeek = frame;
        }
    }
    /**
     * Whether the given frame is inside the animation range.
     *
     * @param frame - The frame to check.
     */
    isInRange(frame) {
        return frame >= 0 && frame <= this.playback.duration;
    }
    /**
     * Whether the given frame is inside the user-defined range.
     *
     * @param frame - The frame to check.
     */
    isInUserRange(frame) {
        return frame >= this.startFrame && frame <= this.endFrame;
    }
    requestSeek(value) {
        this.requestedSeek = this.clampRange(value);
    }
    requestPreviousFrame() {
        this.requestedSeek = this.frame.current - this.playback.speed;
    }
    requestNextFrame() {
        this.requestedSeek = this.frame.current + this.playback.speed;
    }
    requestReset() {
        this.requestedSeek = 0;
    }
    requestRender() {
        this.requestedRender = true;
    }
    toggleLoop(value = !this.playerState.current.loop) {
        if (value !== this.playerState.current.loop) {
            this.playerState.current = {
                ...this.playerState.current,
                loop: value,
            };
        }
    }
    togglePlayback(value = this.playerState.current.paused) {
        if (value === this.playerState.current.paused) {
            this.playerState.current = {
                ...this.playerState.current,
                paused: !value,
            };
            // hitting play after the animation has finished should reset the
            // playback, even if looping is disabled.
            if (value &&
                !this.playerState.current.loop &&
                this.playback.frame === this.playback.duration) {
                this.requestReset();
            }
        }
    }
    toggleAudio(value = this.playerState.current.muted) {
        if (value === this.playerState.current.muted) {
            this.playerState.current = {
                ...this.playerState.current,
                muted: !value,
            };
        }
    }
    setAudioVolume(value) {
        const clampedValue = clamp(0, 1, value);
        if (clampedValue !== this.playerState.current.volume) {
            this.playerState.current = {
                ...this.playerState.current,
                volume: clampedValue,
            };
        }
    }
    addAudioVolume(value) {
        this.setAudioVolume(this.playerState.current.volume + value);
    }
    setSpeed(value) {
        if (value !== this.playerState.current.speed) {
            this.playback.speed = value;
            this.playback.reload();
            this.playerState.current = {
                ...this.playerState.current,
                speed: value,
            };
            this.requestRecalculation();
        }
    }
    setVariables(variables) {
        for (const scene of this.playback.onScenesRecalculated.current) {
            scene.variables.updateSignals(variables);
        }
    }
    /**
     * Activate the player.
     *
     * @remarks
     * A player needs to be active in order for the update loop to run. Each
     * player is active by default.
     */
    activate() {
        this.active = true;
        this.request();
    }
    /**
     * Deactivate the player.
     *
     * @remarks
     * Deactivating the player prevents its update loop from running. This should
     * be done before disposing the player, to prevent it from running in the
     * background.
     *
     * Just pausing the player does not stop the loop.
     */
    deactivate() {
        this.active = false;
        this.sharedWebGLContext.dispose();
        this.playback.currentScene.stopAllMedia();
        if (this.requestId !== null) {
            cancelAnimationFrame(this.requestId);
            this.requestId = null;
        }
    }
    requestRecalculation() {
        this.requestedRecalculation = true;
        this.request();
    }
    async prepare() {
        const state = {
            ...this.playerState.current,
            seek: this.requestedSeek,
            render: this.requestedRender,
        };
        this.requestedSeek = -1;
        this.requestedRender = false;
        // Recalculate the project if necessary
        if (this.requestedRecalculation) {
            if (state.seek < 0) {
                state.seek = this.playback.frame;
            }
            try {
                await this.playback.recalculate();
                this.duration.current = this.playback.frame;
                this.recalculated.dispatch();
            }
            catch (e) {
                this.requestSeek(state.seek);
                throw e;
            }
            finally {
                this.requestedRecalculation = false;
            }
        }
        // Pause if reached the end or the range is 0
        // Seek to the beginning for non-empty scenes
        if ((!state.loop && this.finished && !state.paused && state.seek < 0) ||
            this.endFrame === this.startFrame) {
            this.togglePlayback(false);
            state.paused = true;
            state.seek =
                this.endFrame === this.startFrame ? state.seek : this.startFrame;
        }
        // Seek to the beginning if looping is enabled
        if (state.loop &&
            (state.seek > this.endFrame || (this.finished && !state.paused)) &&
            this.startFrame !== this.endTime) {
            state.seek = this.startFrame;
        }
        return state;
    }
    async run() {
        const state = await this.prepare();
        const previousState = this.playback.state;
        this.playback.state = state.paused
            ? PlaybackState.Paused
            : PlaybackState.Playing;
        // Seek to the given frame
        if (state.seek >= 0 || !this.isInUserRange(this.status.frame)) {
            const seekFrame = state.seek < 0 ? this.status.frame : state.seek;
            const clampedFrame = this.clampRange(seekFrame);
            this.logger.profile('seek time');
            await this.playback.seek(clampedFrame);
            this.logger.profile('seek time');
        }
        // Do nothing if paused
        else if (state.paused) {
            if (state.render ||
                (state.paused && previousState !== PlaybackState.Paused)) {
                // Tells the stage to render the current frame
                await this.render.dispatch();
            }
            this.request();
            return;
        }
        // Simply move forward one frame
        else if (this.status.frame < this.endFrame) {
            await this.playback.progress();
        }
        // Pause if a new slide has just started.
        if (!state.paused && this.playback.currentScene.slides.isWaiting()) {
            this.togglePlayback(false);
            state.paused = true;
        }
        // Draw the project
        await this.render.dispatch();
        this.frame.current = this.playback.frame;
        this.request();
    }
    request() {
        if (!this.active)
            return;
        // TODO(konsti): make this loop not run when player is paused
        this.requestId ?? (this.requestId = requestAnimationFrame(async (time) => {
            this.requestId = null;
            if (time - this.renderTime >= 1000 / (this.status.fps + 5)) {
                this.renderTime = time;
                await this.lock.acquire();
                try {
                    await this.run();
                }
                catch (e) {
                    this.logger.error(e);
                }
                this.lock.release();
            }
            else {
                this.request();
            }
        }));
    }
    clampRange(frame) {
        return clamp(this.startFrame, this.endFrame, frame);
    }
}
//# sourceMappingURL=data:application/json;base64,