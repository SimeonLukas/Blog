import loadMp4Module from 'mp4-wasm';
import { download } from './download-videos';
export class WasmExporter {
    static async create(project, settings) {
        return new WasmExporter(project, settings);
    }
    constructor(project, settings) {
        this.project = project;
        this.settings = settings;
    }
    async start() {
        const resp = await fetch('/@mp4-wasm');
        const buffer = await resp.arrayBuffer();
        const mp4 = await loadMp4Module({
            wasmBinary: buffer,
        });
        this.encoder = mp4.createWebCodecsEncoder({
            width: this.settings.size.x,
            height: this.settings.size.y,
            fps: this.project.settings.rendering.fps,
        });
    }
    async handleFrame(canvas) {
        const frame = new VideoFrame(canvas, { timestamp: 0 });
        await this.encoder.addFrame(frame);
        frame.close();
    }
    async stop() {
        const buf = await this.encoder.end();
        const formData = new FormData();
        formData.append('file', new Blob([buf], { type: 'video/mp4' }), 'video.mp4');
        formData.append('tempDir', `revideo-${this.settings.name}-${this.settings.hiddenFolderId}`);
        await fetch('/revideo-ffmpeg-decoder/finished', {
            method: 'POST',
            headers: {
                // eslint-disable-next-line
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({}),
        });
        await fetch('/uploadVideoFile', {
            method: 'POST',
            body: formData,
        });
    }
    async generateAudio(assets, startFrame, endFrame) {
        await fetch('/audio-processing/generate-audio', {
            method: 'POST',
            // TODO: add type and validate on the other side
            body: JSON.stringify({
                tempDir: `revideo-${this.settings.name}-${this.settings.hiddenFolderId}`,
                assets,
                startFrame,
                endFrame,
                fps: this.settings.fps,
            }),
        });
    }
    async mergeMedia() {
        const outputFilename = this.settings.name;
        const tempDir = `revideo-${this.settings.name}-${this.settings.hiddenFolderId}`;
        await fetch('/audio-processing/merge-media', {
            method: 'POST',
            // TODO: add type and validate on the other side
            body: JSON.stringify({
                outputFilename,
                tempDir,
                format: 'mp4',
            }),
        });
    }
    async downloadVideos(assets) {
        await download(assets);
    }
}
WasmExporter.id = '@revideo/core/wasm';
WasmExporter.displayName = 'Video (Wasm)';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FzbUV4cG9ydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cG9ydGVyL1dhc21FeHBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGFBQWEsTUFBTSxVQUFVLENBQUM7QUFJckMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRTNDLE1BQU0sT0FBTyxZQUFZO0lBSWhCLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQWdCLEVBQUUsUUFBMEI7UUFDckUsT0FBTyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELFlBQ21CLE9BQWdCLEVBQ2hCLFFBQTBCO1FBRDFCLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFDMUMsQ0FBQztJQUVHLEtBQUssQ0FBQyxLQUFLO1FBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXhDLE1BQU0sR0FBRyxHQUFHLE1BQU0sYUFBYSxDQUFDO1lBQzlCLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLHNCQUFzQixDQUFDO1lBQ3hDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVCLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRztTQUN6QyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBSU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUF5QjtRQUNoRCxNQUFN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