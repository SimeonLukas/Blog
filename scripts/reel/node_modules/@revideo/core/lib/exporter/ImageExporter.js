var _a;
import { EventDispatcher } from '../events';
import { clamp } from '../tweening';
import { download } from './download-videos';
const EXPORT_FRAME_LIMIT = 256;
const EXPORT_RETRY_DELAY = 1000;
/**
 * Image sequence exporter.
 *
 * @internal
 */
export class ImageExporter {
    static async create(project, settings) {
        return new _a(project.logger, settings);
    }
    constructor(logger, settings) {
        this.logger = logger;
        this.frameLookup = new Set();
        this.handleResponse = ({ frame }) => {
            this.frameLookup.delete(frame);
        };
        if (settings.exporter.name !== _a.id) {
            throw new Error(`Invalid exporter name: ${settings.exporter.name}. Expected: ${_a.id}`);
        }
        const options = settings.exporter.options;
        this.projectName = settings.name;
        this.quality = clamp(0, 1, options.quality / 100);
        this.fileType = options.fileType;
        this.groupByScene = options.groupByScene;
    }
    async start() {
        _a.response.subscribe(this.handleResponse);
    }
    async handleFrame(canvas, frame, sceneFrame, sceneName, signal) {
        if (this.frameLookup.has(frame)) {
            this.logger.warn(`Frame no. ${frame} is already being exported.`);
            return;
        }
        if (import.meta.hot) {
            while (this.frameLookup.size > EXPORT_FRAME_LIMIT) {
                await new Promise(resolve => setTimeout(resolve, EXPORT_RETRY_DELAY));
                if (signal.aborted) {
                    return;
                }
            }
            this.frameLookup.add(frame);
            import.meta.hot.send('revideo:export', {
                frame,
                sceneFrame,
                data: canvas.toDataURL(this.fileType, this.quality),
                mimeType: this.fileType,
                subDirectories: this.groupByScene
                    ? [this.projectName, sceneName]
                    : [this.projectName],
                groupByScene: this.groupByScene,
            });
        }
    }
    async downloadVideos(assets) {
        await download(assets);
    }
    async stop() {
        while (this.frameLookup.size > 0) {
            await new Promise(resolve => setTimeout(resolve, EXPORT_RETRY_DELAY));
        }
        _a.response.unsubscribe(this.handleResponse);
    }
}
_a = ImageExporter;
ImageExporter.id = '@revideo/core/image-sequence';
ImageExporter.displayName = 'Image sequence';
ImageExporter.response = new EventDispatcher();
(() => {
    if (import.meta.hot) {
        import.meta.hot.on('revideo:export-ack', response => {
            _a.response.dispatch(response);
        });
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2VFeHBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBvcnRlci9JbWFnZUV4cG9ydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFHbEMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRTNDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0FBWWhDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sYUFBYTtJQUlqQixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FDeEIsT0FBZ0IsRUFDaEIsUUFBMEI7UUFFMUIsT0FBTyxJQUFJLEVBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFrQkQsWUFDbUIsTUFBYyxFQUMvQixRQUEwQjtRQURULFdBQU0sR0FBTixNQUFNLENBQVE7UUFQaEIsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO1FBdUV6QyxtQkFBYyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQWlCLEVBQUUsRUFBRTtZQUNuRCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUM7UUEvREEsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxFQUFhLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDaEQsTUFBTSxJQUFJLEtBQUssQ0FDYiwwQkFBMEIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLGVBQWUsRUFBYSxDQUFDLEVBQUUsRUFBRSxDQUNsRixDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FB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