import type { Logger } from '../app/Logger';
import type { Project } from '../app/Project';
import type { AssetInfo, RendererSettings } from '../app/Renderer';
import type { CanvasOutputMimeType } from '../types';
import type { Exporter } from './Exporter';
export interface ImageExporterOptions {
    quality: number;
    fileType: CanvasOutputMimeType;
    groupByScene: boolean;
}
/**
 * Image sequence exporter.
 *
 * @internal
 */
export declare class ImageExporter implements Exporter {
    private readonly logger;
    static readonly id = "@revideo/core/image-sequence";
    static readonly displayName = "Image sequence";
    static create(project: Project, settings: RendererSettings): Promise<ImageExporter>;
    private static readonly response;
    private readonly frameLookup;
    private readonly projectName;
    private readonly quality;
    private readonly fileType;
    private readonly groupByScene;
    constructor(logger: Logger, settings: RendererSettings);
    start(): Promise<void>;
    handleFrame(canvas: HTMLCanvasElement, frame: number, sceneFrame: number, sceneName: string, signal: AbortSignal): Promise<void>;
    downloadVideos(assets: AssetInfo[][]): Promise<void>;
    stop(): Promise<void>;
    private handleResponse;
}
//# sourceMappingURL=ImageExporter.d.ts.map