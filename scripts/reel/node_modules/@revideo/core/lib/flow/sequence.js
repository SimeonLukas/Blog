import { decorate, threadable } from '../decorators';
import { join } from './join';
import { waitFor } from './scheduling';
decorate(sequence, threadable());
/**
 * Start all tasks one after another with a constant delay between.
 *
 * @remarks
 * The function doesn't wait until the previous task in the sequence has
 * finished. Once the delay has passed, the next task will start even if
 * the previous is still running.
 *
 * @example
 * ```ts
 * yield* sequence(
 *   0.1,
 *   ...rects.map(rect => rect.x(100, 1))
 * );
 * ```
 *
 * @param delay - The delay between each of the tasks.
 * @param tasks - A list of tasks to be run in a sequence.
 */
export function* sequence(delay, ...tasks) {
    for (const task of tasks) {
        yield task;
        yield* waitFor(delay);
    }
    yield* join(...tasks);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VxdWVuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmxvdy9zZXF1ZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQzVCLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFckMsUUFBUSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFDSCxNQUFNLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FDdkIsS0FBYSxFQUNiLEdBQUcsS0FBd0I7SUFFM0IsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN6QixNQUFNLElBQUksQ0FBQztRQUNYLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDeEIsQ0FBQyJ9