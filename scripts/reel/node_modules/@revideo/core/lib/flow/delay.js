import { decorate, threadable } from '../decorators';
import { waitFor } from './scheduling';
decorate(delay, threadable());
/**
 * Run the given generator or callback after a specific amount of time.
 *
 * @example
 * ```ts
 * yield* delay(1, rect.fill('#ff0000', 2));
 * ```
 *
 * Note that the same animation can be written as:
 * ```ts
 * yield* waitFor(1),
 * yield* rect.fill('#ff0000', 2),
 * ```
 *
 * The reason `delay` exists is to make it easier to pass it to other flow
 * functions. For example:
 * ```ts
 * yield* all(
 *   rect.opacity(1, 3),
 *   delay(1, rect.fill('#ff0000', 2));
 * );
 * ```
 *
 * @param time - The delay in seconds
 * @param task - The task or callback to run after the delay.
 */
export function* delay(time, task) {
    yield* waitFor(time);
    if ('next' in task) {
        yield* task;
    }
    else {
        task();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmxvdy9kZWxheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBRXJDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUM5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCRztBQUNILE1BQU0sU0FBUyxDQUFDLENBQUMsS0FBSyxDQUNwQixJQUFZLEVBQ1osSUFBZ0M7SUFFaEMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JCLElBQUksTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ25CLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7U0FBTSxDQUFDO1FBQ04sSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDO0FBQ0gsQ0FBQyJ9