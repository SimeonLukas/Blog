import { decorate, threadable } from '../decorators';
import { useLogger, useThread } from '../utils';
const infiniteLoop = `
Make sure to use \`yield\` or \`spawn()\` to execute the loop concurrently in a
separate thread:

\`\`\`ts wrong
// prettier-ignore
yield* loop(() => rect().opacity(0).opacity(1, 1));
\`\`\`

\`\`\`ts correct
yield loop(() => rect().opacity(0).opacity(1, 1));
// or
spawn(loop(() => rect().opacity(0).opacity(1, 1)));
\`\`\`

If you want to execute the loop a finite number of times, specify the iteration
count as the first argument:

\`\`\`ts
// prettier-ignore
yield* loop(10, () => rect().opacity(0).opacity(1, 1));
//          ^ iteration count
\`\`\`
`;
decorate(loop, threadable());
export function* loop(iterations, factory) {
    if (typeof iterations !== 'number') {
        factory = iterations;
        iterations = Infinity;
    }
    if (iterations === Infinity && useThread().parent === null) {
        useLogger().error({
            message: 'Tried to execute an infinite loop in the main thread.',
            remarks: infiniteLoop,
            stack: new Error().stack,
        });
        return;
    }
    for (let i = 0; i < iterations; i++) {
        const generator = factory(i);
        if (generator) {
            yield* generator;
        }
        else {
            yield;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mbG93L2xvb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFOUMsTUFBTSxZQUFZLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBdUJwQixDQUFDO0FBV0YsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBcUQ3QixNQUFNLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDbkIsVUFBaUMsRUFDakMsT0FBc0I7SUFFdEIsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxPQUFPLEdBQUcsVUFBVSxDQUFDO1FBQ3JCLFVBQVUsR0FBRyxRQUFRLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksVUFBVSxLQUFLLFFBQVEsSUFBSSxTQUFTLEVBQUUsQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDM0QsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ2hCLE9BQU8sRUFBRSx1REFBdUQ7WUFDaEUsT0FBTyxFQUFFLFlBQVk7WUFDckIsS0FBSyxFQUFFLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSztTQUN6QixDQUFDLENBQUM7UUFDSCxPQUFPO0lBQ1QsQ0FBQztJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNwQyxNQUFNLFNBQVMsR0FBRyxPQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNkLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNuQixDQUFDO2FBQU0sQ0FBQztZQUNOLEtBQUssQ0FBQztRQUNSLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyJ9