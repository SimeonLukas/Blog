import type { RenderVideoUserProjectSettings } from '@revideo/core';
import type { FfmpegSettings } from '@revideo/ffmpeg';
import type { PuppeteerLaunchOptions } from 'puppeteer';
import type { InlineConfig, ServerOptions } from 'vite';
export interface RenderSettings {
    outFile?: `${string}.mp4` | `${string}.webm` | `${string}.mov`;
    outDir?: string;
    ffmpeg?: FfmpegSettings;
    puppeteer?: PuppeteerLaunchOptions;
    workers?: number;
    logProgress?: boolean;
    projectSettings?: RenderVideoUserProjectSettings;
    /**
     * When using multiple workers, this is the port of the first worker.
     * Each worker will increment the port by 1.
     * If the port is already in use, the next port will be used.
     *
     * Default is 9000
     */
    viteBasePort?: number;
    /**
     * @deprecated Use `viteConfig.server` instead.
     */
    viteServerOptions?: Omit<ServerOptions, 'port'>;
    viteConfig?: InlineConfig;
    progressCallback?: (worker: number, progress: number) => void;
}
interface RenderVideoParams {
    projectFile: string;
    variables?: Record<string, unknown>;
    settings?: RenderSettings;
}
/**
 * Renders a video to a file.
 * @param projectFile - Path to the project.ts file.
 * @param variables - Variables to pass to your project (see https://docs.re.video/parameterized-video)
 * @param progressCallback - Callback function to track rendering progress. Progress is a number between 0 and 1.
 * @param settings - Settings for the rendering process.
 * @returns - Path to the rendered video file.
 */
export declare function renderVideo({ projectFile, variables, settings, }: RenderVideoParams): Promise<string>;
interface RenderPartialVideoProps extends RenderVideoParams {
    workerId: number;
    numWorkers: number;
    settings?: Omit<RenderSettings, 'workers'>;
}
export declare const renderPartialVideo: ({ projectFile, variables, settings, numWorkers, workerId, }: RenderPartialVideoProps) => Promise<{
    audioFile: string;
    videoFile: string;
}>;
export {};
//# sourceMappingURL=render-video.d.ts.map