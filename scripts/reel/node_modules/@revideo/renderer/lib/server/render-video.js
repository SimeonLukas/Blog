"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderPartialVideo = void 0;
exports.renderVideo = renderVideo;
const ffmpeg_1 = require("@revideo/ffmpeg");
const telemetry_1 = require("@revideo/telemetry");
const vite_plugin_1 = require("@revideo/vite-plugin");
const fs = require("fs");
const os = require("os");
const path = require("path");
const puppeteer_1 = require("puppeteer");
const vite_1 = require("vite");
const renderer_plugin_1 = require("./renderer-plugin");
const validate_settings_1 = require("./validate-settings");
/**
 * We pass a lot of render settings to the client side of the renderer
 * via the URL. This function builds the URL with the necessary parameters.
 */
function buildUrl(port, fileName, workerId, totalNumOfWorkers, hiddenFolderId) {
    const fileNameEscaped = encodeURIComponent(fileName);
    const hiddenFolderIdEscaped = encodeURIComponent(hiddenFolderId);
    return `http://localhost:${port}/render?fileName=${fileNameEscaped}&workerId=${workerId}&totalNumOfWorkers=${totalNumOfWorkers}&hiddenFolderId=${hiddenFolderIdEscaped}`;
}
/**
 * Starts the vite server and creates a puppeteer browser instance
 */
async function initBrowserAndServer(fixedPort, projectFile, outputFolderName, settings, variables) {
    const args = settings.puppeteer?.args ?? [];
    args.includes('--single-process') || args.push('--single-process');
    const resolvedProjectPath = path.join(process.cwd(), projectFile);
    const [browser, server] = await Promise.all([
        puppeteer_1.default.launch({ headless: true, ...settings.puppeteer, args }),
        (0, vite_1.createServer)({
            configFile: false,
            plugins: [
                (0, vite_plugin_1.default)({ project: resolvedProjectPath, output: outputFolderName }),
                (0, renderer_plugin_1.rendererPlugin)(settings.projectSettings, variables, settings.ffmpeg, projectFile),
            ],
            ...settings.viteConfig,
            server: {
                port: fixedPort,
                hmr: false,
                ...settings.viteServerOptions,
                ...settings.viteConfig?.server,
            },
        }).then(server => server.listen()),
    ]);
    if (!server.httpServer) {
        throw new Error('HTTP server is not initialized');
    }
    const address = server.httpServer.address();
    const resolvedPort = address && typeof address === 'object' ? address.port : null;
    if (resolvedPort === null) {
        throw new Error('Server address is null');
    }
    return { browser, server, resolvedPort };
}
function trackProgress(tracker, id, progress) {
    tracker.set(id, progress);
}
/**
 * Navigates to the URL and renders the video on the page
 */
async function renderVideoOnPage(id, browser, server, url, progressTracker, progressCallback, logProgress) {
    function printProgress() {
        let line = '';
        for (const [key, value] of progressTracker.entries()) {
            line += `Render progress, worker ${key}: ${(value * 100).toFixed(0)}% `;
        }
        if (line === '') {
            return;
        }
        console.log(line);
    }
    const interval = setInterval(() => {
        printProgress();
    }, 1000);
    const page = await browser.newPage();
    if (!server.httpServer) {
        throw new Error('HTTP server is not initialized');
    }
    const address = server.httpServer.address();
    const port = address && typeof address === 'object' ? address.port : null;
    if (port === null) {
        throw new Error('Server address is null');
    }
    // only report for worker 0
    if (id === 0) {
        (0, telemetry_1.sendEvent)(telemetry_1.EventName.RenderStarted);
    }
    // Attach logs from puppeteer to the console
    page.on('console', msg => {
        for (let i = 0; i < msg.args().length; ++i) {
            const message = msg.args()[i];
            if (message.toString().includes('[vite]')) {
                continue;
            }
            console.log(`Worker ${id}: ${msg.args()[i]}`);
        }
    });
    page.exposeFunction('logProgress', (progress) => {
        if (progressCallback) {
            progressCallback(id, progress);
        }
        if (logProgress) {
            trackProgress(progressTracker, id, progress);
        }
    });
    const renderingComplete = new Promise((resolve, reject) => {
        page.exposeFunction('onRenderComplete', async () => {
            await Promise.all([browser.close(), server.close()]);
            clearInterval(interval);
            resolve();
        });
        page.exposeFunction('onRenderFailed', async (errorMessage) => {
            await Promise.all([browser.close(), server.close()]);
            console.error('Rendering failed:', errorMessage);
            clearInterval(interval);
            reject(new Error(errorMessage));
        });
        page.exposeFunction('browserError', (message) => {
            reject(new Error(message));
        });
    });
    await page.goto(url);
    return renderingComplete;
}
/**
 * Initializes the browser and starts rendering the video
 */
async function initializeBrowserAndStartRendering(projectFile, outputFileName, outputFolderName, i, numOfWorkers, settings, hiddenFolderId, variables, progressCallback) {
    const port = (settings.viteBasePort !== undefined ? settings.viteBasePort : 9000) + i;
    const progressTracker = new Map();
    const { browser, server, resolvedPort } = await initBrowserAndServer(port, projectFile, outputFolderName, settings, variables);
    const url = buildUrl(resolvedPort, `${outputFileName}-${i}`, i, numOfWorkers, hiddenFolderId);
    return renderVideoOnPage(i, browser, server, url, progressTracker, progressCallback, settings.logProgress);
}
/**
 * Collects audio and video files from each worker and returns them.
 * If audio file does not exist, creates a silent audio file with the same duration as the video file.
 */
async function collectAudioAndVideoFiles(numOfWorkers, outputFileName, hiddenFolderId, format) {
    const audioFiles = [];
    const videoFiles = [];
    for (let i = 0; i < numOfWorkers; i++) {
        const videoFilePath = `${os.tmpdir()}/revideo-${outputFileName}-${i}-${hiddenFolderId}/visuals.${ffmpeg_1.extensions[format]}`;
        const audioFilePath = `${os.tmpdir()}/revideo-${outputFileName}-${i}-${hiddenFolderId}/audio.wav`;
        if (!(await (0, ffmpeg_1.doesFileExist)(audioFilePath))) {
            const videoDuration = await (0, ffmpeg_1.getVideoDuration)(videoFilePath);
            await (0, ffmpeg_1.createSilentAudioFile)(audioFilePath, videoDuration);
        }
        videoFiles.push(videoFilePath);
        audioFiles.push(audioFilePath);
    }
    return { audioFiles, videoFiles };
}
/**
 * Concatenates audio and video files and merges them into a single video file.
 */
async function concatenateAudioAndVideoFiles(outputFileName, outputFolder, audioFiles, videoFiles, format) {
    await (0, ffmpeg_1.concatenateMedia)(videoFiles, path.join(outputFolder, `${outputFileName}-visuals.${ffmpeg_1.extensions[format]}`));
    await (0, ffmpeg_1.concatenateMedia)(audioFiles, path.join(outputFolder, `${outputFileName}-audio.wav`));
    await (0, ffmpeg_1.mergeAudioWithVideo)(path.join(outputFolder, `${outputFileName}-audio.wav`), path.join(outputFolder, `${outputFileName}-visuals.${ffmpeg_1.extensions[format]}`), path.join(outputFolder, `${outputFileName}.${ffmpeg_1.extensions[format]}`), ffmpeg_1.audioCodecs[format]);
}
/**
 * Deletes all partial files after concatenation is done
 */
async function cleanup(outputFileName, outputFolderName, numOfWorkers, hiddenFolderId, format) {
    const cleanupFolders = [];
    const cleanupFiles = [];
    for (let i = 0; i < numOfWorkers; i++) {
        cleanupFolders.push(`${os.tmpdir()}/revideo-${outputFileName}-${i}-${hiddenFolderId}`);
        cleanupFiles.push(path.join(process.cwd(), outputFolderName, `${outputFileName}-${i}.${ffmpeg_1.extensions[format]}`));
    }
    cleanupFiles.push(path.join(process.cwd(), outputFolderName, `${outputFileName}-audio.wav`));
    cleanupFiles.push(path.join(process.cwd(), outputFolderName, `${outputFileName}-visuals.${ffmpeg_1.extensions[format]}`));
    const folderCleanupPromises = cleanupFolders.map(folder => fs.promises.rm(folder, { recursive: true, force: true }).catch(() => { }));
    const fileCleanupPromises = cleanupFiles.map(file => fs.promises.unlink(file).catch(() => { }));
    await Promise.all([...folderCleanupPromises, ...fileCleanupPromises]);
}
const defaultSettings = {
    projectSettings: {
        exporter: {
            name: '@revideo/core/wasm',
        },
    },
};
/**
 * Renders a video to a file.
 * @param projectFile - Path to the project.ts file.
 * @param variables - Variables to pass to your project (see https://docs.re.video/parameterized-video)
 * @param progressCallback - Callback function to track rendering progress. Progress is a number between 0 and 1.
 * @param settings - Settings for the rendering process.
 * @returns - Path to the rendered video file.
 */
async function renderVideo({ projectFile, variables, settings = defaultSettings, }) {
    const { outputFileName, outputFolderName, numOfWorkers, hiddenFolderId, format, } = (0, validate_settings_1.getParamDefaultsAndCheckValidity)(settings);
    // Start rendering
    const renderPromises = [];
    for (let i = 0; i < numOfWorkers; i++) {
        renderPromises.push(initializeBrowserAndStartRendering(projectFile, outputFileName, outputFolderName, i, numOfWorkers, settings, hiddenFolderId, variables, settings.progressCallback));
    }
    // Wait for workers to finish rendering
    await Promise.all(renderPromises);
    // Collect and concatenate audio and video files
    const { audioFiles, videoFiles } = await collectAudioAndVideoFiles(numOfWorkers, outputFileName, hiddenFolderId, format);
    await concatenateAudioAndVideoFiles(outputFileName, outputFolderName, audioFiles, videoFiles, format);
    await cleanup(outputFileName, outputFolderName, numOfWorkers, hiddenFolderId, format);
    return path.join(outputFolderName, `${outputFileName}.${ffmpeg_1.extensions[format]}`);
}
const renderPartialVideo = async ({ projectFile, variables, settings = defaultSettings, numWorkers, workerId, }) => {
    const { outputFileName, outputFolderName, hiddenFolderId, format } = (0, validate_settings_1.getParamDefaultsAndCheckValidity)(settings);
    await initializeBrowserAndStartRendering(projectFile, outputFileName, outputFolderName, workerId, numWorkers, settings, hiddenFolderId, variables, settings.progressCallback);
    const videoFilePath = `${os.tmpdir()}/revideo-${outputFileName}-${workerId}-${hiddenFolderId}/visuals.${ffmpeg_1.extensions[format]}`;
    const audioFilePath = `${os.tmpdir()}/revideo-${outputFileName}-${workerId}-${hiddenFolderId}/audio.wav`;
    if (!(await (0, ffmpeg_1.doesFileExist)(audioFilePath))) {
        const videoDuration = await (0, ffmpeg_1.getVideoDuration)(videoFilePath);
        await (0, ffmpeg_1.createSilentAudioFile)(audioFilePath, videoDuration);
    }
    return { audioFile: audioFilePath, videoFile: videoFilePath };
};
exports.renderPartialVideo = renderPartialVideo;
//# sourceMappingURL=data:application/json;base64,