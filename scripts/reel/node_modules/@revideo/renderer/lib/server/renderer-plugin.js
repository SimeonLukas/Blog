"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rendererPlugin = rendererPlugin;
const ffmpeg_1 = require("@revideo/ffmpeg");
const fs = require("fs");
const path = require("path");
const RendererPath = path.resolve(__dirname, '../renderer.html');
const Content = fs.readFileSync(RendererPath, 'utf-8');
const HtmlParts = Content.toString().split('{{source}}');
function createHtml(src) {
    return HtmlParts[0] + src + HtmlParts[1];
}
function escapeSpecialChars(_, value) {
    if (typeof value === 'string') {
        /* eslint-disable no-useless-escape */
        return value
            .replace(/[\\]/g, '\\\\')
            .replace(/[\"]/g, '\\"')
            .replace(/[\/]/g, '\\/')
            .replace(/[\b]/g, '\\b')
            .replace(/[\f]/g, '\\f')
            .replace(/[\n]/g, '\\n')
            .replace(/[\r]/g, '\\r')
            .replace(/[\t]/g, '\\t');
        /* eslint-enable no-useless-escape */
    }
    return value;
}
function rendererPlugin(projectSettings, variables, customFfmpegSettings, projectFile) {
    if (customFfmpegSettings?.ffmpegPath) {
        ffmpeg_1.ffmpegSettings.setFfmpegPath(customFfmpegSettings.ffmpegPath);
    }
    if (customFfmpegSettings?.ffprobePath) {
        ffmpeg_1.ffmpegSettings.setFfprobePath(customFfmpegSettings.ffprobePath);
    }
    if (customFfmpegSettings?.ffmpegLogLevel) {
        ffmpeg_1.ffmpegSettings.setLogLevel(customFfmpegSettings.ffmpegLogLevel);
    }
    const projectSettingsString = projectSettings
        ? JSON.stringify(projectSettings)
        : JSON.stringify({});
    return {
        name: 'revideo-renderer-plugin',
        async load(id) {
            if (id.startsWith('\x00virtual:renderer')) {
                return `\
            import {render} from '@revideo/renderer/lib/client/render';
            import {Vector2} from '@revideo/core';
            import project from '${projectFile}';

            // Read video variables
            project.variables = ${variables ? `JSON.parse(\`${JSON.stringify(variables, escapeSpecialChars)}\`)` : 'project.variables'};

            // Check range of frames to render
            const url = new URL(window.location.href);

            const fileNameEscaped = url.searchParams.get('fileName');
            const workerId = parseInt(url.searchParams.get('workerId'));
            const totalNumOfWorkers = parseInt(url.searchParams.get('totalNumOfWorkers'));
            const hiddenFolderIdEscaped = url.searchParams.get('hiddenFolderId');

            const fileName = decodeURIComponent(fileNameEscaped);
            const hiddenFolderId = decodeURIComponent(hiddenFolderIdEscaped);

            // Overwrite project name so that the rendered videos don't overwrite each other
            project.name = fileName;

            render(project, workerId, totalNumOfWorkers, hiddenFolderId, JSON.parse(\`${projectSettingsString}\`));
            `;
            }
        },
        configureServer(server) {
            server.middlewares.use('/render', (_req, res) => {
                res.setHeader('Content-Type', 'text/html');
                res.end(createHtml(`/@id/__x00__virtual:renderer`));
            });
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXItcGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc2VydmVyL3JlbmRlcmVyLXBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWlDQSx3Q0EyREM7QUExRkQsNENBQStDO0FBQy9DLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFHN0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUNqRSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2RCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXpELFNBQVMsVUFBVSxDQUFDLEdBQVc7SUFDN0IsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxDQUFTLEVBQUUsS0FBYTtJQUNsRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQzlCLHNDQUFzQztRQUN0QyxPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQzthQUN4QixPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQzthQUN2QixPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQzthQUN2QixPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQzthQUN2QixPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQzthQUN2QixPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQzthQUN2QixPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQzthQUN2QixPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNCLHFDQUFxQztJQUN2QyxDQUFDO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsU0FBZ0IsY0FBYyxDQUM1QixlQUFnRCxFQUNoRCxTQUFtQyxFQUNuQyxvQkFBcUMsRUFDckMsV0FBb0I7SUFFcEIsSUFBSSxvQkFBb0IsRUFBRSxVQUFVLEVBQUUsQ0FBQztRQUNyQyx1QkFBYyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ0QsSUFBSSxvQkFBb0IsRUFBRSxXQUFXLEVBQUUsQ0FBQztRQUN0Qyx1QkFBYyxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBQ0QsSUFBSSxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsQ0FBQztRQUN6Qyx1QkFBYyxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsTUFBTSxxQkFBcUIsR0FBRyxlQUFlO1FBQzNDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV2QixPQUFPO1FBQ0wsSUFBSSxFQUFFLHlCQUF5QjtRQUUvQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDWCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDO2dCQUMxQyxPQUFPOzs7bUNBR29CLFdBQVc7OztrQ0FHWixTQUFTLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjs7Ozs7Ozs7Ozs7Ozs7Ozt3RkFnQjlDLHFCQUFxQjthQUNoRyxDQUFDO1lBQ1IsQ0FBQztRQUNILENBQUM7UUFFRCxlQUFlLENBQUMsTUFBTTtZQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQzlDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUMzQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7WUFDdEQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMifQ==