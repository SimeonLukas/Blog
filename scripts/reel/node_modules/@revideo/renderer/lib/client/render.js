import { Color, Renderer, Vector2, getFullRenderingSettings, } from '@revideo/core';
/**
 * Render the project.
 */
export const render = async (project, workerId, totalNumOfWorkers, hiddenFolderId, overwriteRenderSettings) => {
    try {
        const renderer = new Renderer(project);
        // Range calculation
        const range = overwriteRenderSettings.range ?? project.settings.shared.range;
        const { firstGlobalFrame, lastGlobalFrame } = await getGlobalFirstAndLastFrame(project, renderer, range[0], range[1]);
        const { firstWorkerFrame, lastWorkerFrame } = await getWorkerFirstAndLastFrame(firstGlobalFrame, lastGlobalFrame, workerId, totalNumOfWorkers);
        const renderSettingsFromProject = getFullRenderingSettings(project);
        // Overwrite settings with user provided settings
        let background = renderSettingsFromProject.background;
        if (overwriteRenderSettings.background) {
            background = new Color(overwriteRenderSettings.background);
        }
        let size = renderSettingsFromProject.size;
        if (overwriteRenderSettings.size) {
            size = new Vector2(overwriteRenderSettings.size.x, overwriteRenderSettings.size.y);
        }
        // Combine settings
        const combinedSettings = {
            ...renderSettingsFromProject,
            name: project.name,
            hiddenFolderId: hiddenFolderId,
            ...overwriteRenderSettings,
            background,
            size,
            range: [
                renderer.frameToTime(firstWorkerFrame),
                renderer.frameToTime(lastWorkerFrame),
            ],
        };
        await renderer.render(combinedSettings);
        window.onRenderComplete();
    }
    catch (e) {
        window.onRenderFailed(e.message);
    }
};
/**
 * Calculate the first and last "global" frame, i.e. frame independent of worker
 */
async function getGlobalFirstAndLastFrame(project, renderer, startSecondFromUser, endSecondFromUser) {
    const firstGlobalFrame = renderer.timeToFrame(startSecondFromUser);
    let lastGlobalFrame;
    // If end value is provided by user, lastFrame can be obtained.
    if (isFinite(endSecondFromUser)) {
        lastGlobalFrame = renderer.timeToFrame(endSecondFromUser);
    }
    else {
        // Otherwise, endSecondFromUser is infinity, so lastGlobalFrame is the duration of the video.
        const settings = {
            ...getFullRenderingSettings(project),
            name: project.name,
        };
        lastGlobalFrame = await renderer.getNumberOfFrames(settings);
    }
    return { firstGlobalFrame, lastGlobalFrame };
}
async function getWorkerFirstAndLastFrame(firstGlobalFrame, lastGlobalFrame, workerId, totalNumOfWorkers) {
    const videoDurationInFrames = lastGlobalFrame - firstGlobalFrame;
    const framesPerWorker = Math.ceil(videoDurationInFrames / totalNumOfWorkers);
    const offset = workerId === 0 ? 0 : 1;
    const firstWorkerFrame = firstGlobalFrame + framesPerWorker * workerId + offset;
    const lastWorkerFrame = Math.min(firstWorkerFrame + framesPerWorker - offset, lastGlobalFrame);
    return { firstWorkerFrame, lastWorkerFrame };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vY2xpZW50L3JlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQ0wsS0FBSyxFQUNMLFFBQVEsRUFDUixPQUFPLEVBQ1Asd0JBQXdCLEdBQ3pCLE1BQU0sZUFBZSxDQUFDO0FBU3ZCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEtBQUssRUFDekIsT0FBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsaUJBQXlCLEVBQ3pCLGNBQXNCLEVBQ3RCLHVCQUF1RCxFQUN2RCxFQUFFO0lBQ0YsSUFBSSxDQUFDO1FBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdkMsb0JBQW9CO1FBQ3BCLE1BQU0sS0FBSyxHQUNULHVCQUF1QixDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFakUsTUFBTSxFQUFDLGdCQUFnQixFQUFFLGVBQWUsRUFBQyxHQUN2QyxNQUFNLDBCQUEwQixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTFFLE1BQU0sRUFBQyxnQkFBZ0IsRUFBRSxlQUFlLEVBQUMsR0FDdkMsTUFBTSwwQkFBMEIsQ0FDOUIsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZixRQUFRLEVBQ1IsaUJBQWlCLENBQ2xCLENBQUM7UUFFSixNQUFNLHlCQUF5QixHQUFHLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXBFLGlEQUFpRDtRQUNqRCxJQUFJLFVBQVUsR0FBRyx5QkFBeUIsQ0FBQyxVQUFVLENBQUM7UUFDdEQsSUFBSSx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN2QyxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsVUFB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